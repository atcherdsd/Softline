{"version":3,"file":"427.b827c62c6584c2ccd55b.js","mappings":"sJAGA,IAAOA,IAAI,CAAC,KAAY,OAET,MAAMC,EACjB,WAAAC,CAAYC,EAAUC,EAAU,CAAC,GAC7BC,KAAKF,SAAWA,EAChBE,KAAKD,QAAUA,EACfC,KAAKC,OAAS,KAEdD,KAAKE,MACT,CAEA,IAAAA,GACIF,KAAKC,OAAS,IAAI,IAAOD,KAAKF,SAAUE,KAAKD,QACjD,CAEA,OAAAI,GACQH,KAAKC,SACLD,KAAKC,OAAOE,SAAQ,GAAM,GAC1BH,KAAKC,OAAS,KAEtB,E,aCpBW,MAAMG,EACjB,WAAAP,CAAYQ,GACRL,KAAKK,UAAYA,EACjBL,KAAKC,OAAS,KACdD,KAAKM,SAAW,KAChBN,KAAKO,OAAQ,UAAa,IAAM,EACpC,CAEA,iBAAIC,GACA,OAAOR,KAAKK,WAAWI,cAAc,0BACzC,CAEA,IAAAP,GACSF,KAAKK,YAEVL,KAAKU,UAELC,OAAOC,iBAAiB,SAAUZ,KAAKa,iBAC3C,CAEA,OAAAH,GACIV,KAAKM,SAAW,IAAIQ,qBAAqBd,KAAKe,gBAAiB,CAC3DC,WAAY,mBACZC,UAAW,KAGfjB,KAAKM,SAASI,QAAQV,KAAKK,UAC/B,CAEAU,gBAAmBG,IACfA,EAAQC,SAASC,IACTA,EAAMC,gBACNrB,KAAKsB,eACT,GACF,EAGNT,iBAAkB,SAAS,KACvB,MAAMU,EAAOvB,KAAKK,UAAUmB,wBACxBD,EAAKE,IAA2B,IAArBd,OAAOe,aAGlBH,EAAKE,IAAMd,OAAOe,cAAgB1B,KAAKK,UAAUsB,UAAUC,SAAS,4BACpE5B,KAAKsB,eACT,GACDtB,KAAKO,OAERe,cAAgB,KACZtB,KAAK6B,aACL7B,KAAKK,UAAUsB,UAAUG,IAAI,2BAC7B9B,KAAKM,UAAUyB,aACfpB,OAAOqB,oBAAoB,SAAUhC,KAAKa,gBAAgB,EAG9D,UAAAgB,GACI,MAAMI,EAAWjC,KAAKQ,cACjByB,IAELjC,KAAKC,OAAS,IAAIL,EAAOqC,EAAU,CAC/BC,cAAe,EACfC,WAAY,CACRC,OAAQpC,KAAKK,UAAUI,cAAc,iCACrC4B,OAAQrC,KAAKK,UAAUI,cAAc,kCAEzC6B,WAAY,CACRC,GAAIvC,KAAKK,UAAUI,cAAc,+BACjC+B,WAAW,EACXC,aAAc,SAAUC,EAAGC,GACvB,MAAO,0CACYA,kCAEvB,KAGZ,E","sources":["webpack://softline/./src/components/common/slider/slider.js","webpack://softline/./src/components/sections/corporate-life/corporate-life.js"],"sourcesContent":["import Swiper from 'swiper';\r\nimport { Navigation, Pagination } from 'swiper/modules';\r\n\r\nSwiper.use([Navigation, Pagination]);\r\n\r\nexport default class Slider {\r\n    constructor(selector, options = {}) {\r\n        this.selector = selector;\r\n        this.options = options;\r\n        this.slider = null;\r\n\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.slider = new Swiper(this.selector, this.options);\r\n    }\r\n\r\n    destroy() {\r\n        if (this.slider) {\r\n            this.slider.destroy(true, true);\r\n            this.slider = null;\r\n        }\r\n    }\r\n}\r\n","import Slider from '../../common/slider/slider.js';\r\nimport { isMobile, debounce } from '../../../utils/helpers.js';\r\n\r\nexport default class CorporateLife {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this.slider = null;\r\n        this.observer = null;\r\n        this.delay = isMobile() ? 150 : 50;\r\n    }\r\n\r\n    get sliderElement() {\r\n        return this.container?.querySelector('.corporate-life__slider');\r\n    }\r\n\r\n    init() {\r\n        if (!this.container) return;\r\n\r\n        this.observe();\r\n\r\n        window.addEventListener('scroll', this.checkVisibility);\r\n    }\r\n\r\n    observe() {\r\n        this.observer = new IntersectionObserver(this.handleIntersect, {\r\n            rootMargin: '0px 0px -20% 0px',\r\n            threshold: 0.2,\r\n        });\r\n    \r\n        this.observer.observe(this.container);\r\n    }\r\n\r\n    handleIntersect = (entries) => {\r\n        entries.forEach((entry) => {\r\n            if (entry.isIntersecting) {\r\n                this.handleVisible();\r\n            }\r\n        });\r\n    }\r\n\r\n    checkVisibility = debounce(() => {\r\n        const rect = this.container.getBoundingClientRect();\r\n        if (rect.top > window.innerHeight * 1.5) {\r\n            return;\r\n        }\r\n        if (rect.top < window.innerHeight && !this.container.classList.contains('corporate-life--visible')) {\r\n            this.handleVisible();\r\n        }\r\n    }, this.delay);\r\n\r\n    handleVisible = () => {\r\n        this.initSlider();\r\n        this.container.classList.add('corporate-life--visible');\r\n        this.observer?.disconnect();\r\n        window.removeEventListener('scroll', this.checkVisibility);\r\n    }\r\n\r\n    initSlider() {\r\n        const sliderEl = this.sliderElement;\r\n        if (!sliderEl) return;\r\n    \r\n        this.slider = new Slider(sliderEl, {\r\n            slidesPerView: 1,\r\n            navigation: {\r\n                nextEl: this.container.querySelector('.corporate-life__button--next'),\r\n                prevEl: this.container.querySelector('.corporate-life__button--prev'),\r\n            },\r\n            pagination: {\r\n                el: this.container.querySelector('.corporate-life__pagination'),\r\n                clickable: true,\r\n                renderBullet: function (_, className) {\r\n                    return `\r\n                        <span class=\"${className}\"></span>\r\n                    `\r\n                },\r\n            },\r\n        });\r\n    }\r\n}\r\n"],"names":["use","Slider","constructor","selector","options","this","slider","init","destroy","CorporateLife","container","observer","delay","sliderElement","querySelector","observe","window","addEventListener","checkVisibility","IntersectionObserver","handleIntersect","rootMargin","threshold","entries","forEach","entry","isIntersecting","handleVisible","rect","getBoundingClientRect","top","innerHeight","classList","contains","initSlider","add","disconnect","removeEventListener","sliderEl","slidesPerView","navigation","nextEl","prevEl","pagination","el","clickable","renderBullet","_","className"],"sourceRoot":""}